apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: ebs-sc
  annotations:
    storageclass.kubernetes.io/is-default-class: "true"
provisioner: ebs.csi.aws.com
parameters:
  type: gp2
  fsType: ext4
  #encrypted: yes
  #kmsKeyId: arn:aws:kms:eu-west-3:080266302756:key/4465d43b-fd5d-4be1-807e-ecf13118f321
reclaimPolicy: Retain
volumeBindingMode: WaitForFirstConsumer
allowVolumeExpansion: true

--- 

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-claim
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: ebs-sc
  resources:
    requests:
      storage: 4Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongo-conf
data:
  # property-like keys; each key maps to a simple value
  database: "abdelali"

  # file-like keys
  #db.sh: |
  #  #!/bin/bash
---
apiVersion: v1
kind: Secret
metadata:
  name: mongo-secret
  namespace: default
  # annotations:
  #   kubernetes.io/service-account.name: "sa-name"
type: Opaque
data:
  # You can include additional key value pairs as you do with Opaque Secrets
  db_root_user: YWJkZWxhbGkK
  db_root_password: YWJkZWxhbGkK
  

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongodb
        image: mongo
        ports:
        - containerPort: 27017
        env:
          - name: MONGO_INITDB_ROOT_USERNAME
            valueFrom:
              secretKeyRef:
                name: mongo-secret
                key: db_root_user
                optional: false # same as default; "mysecret" must exist
                                # and include a key named "username"
          - name: MONGO_INITDB_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mongo-secret
                key: db_root_password
                optional: false # same as default; "mysecret" must exist
                                # and include a key named "password"
          - name: MONGO_INITDB_DATABASE
            valueFrom:
                configMapKeyRef:
                  name: mongo-conf
                  key: database    
        volumeMounts:
        #- name: config
        #  mountPath: "/docker-entrypoint-initdb.d"
        #  readOnly: true
        - name: persistent-storage
          mountPath: /data
          
      volumes:
      - name: persistent-storage
        persistentVolumeClaim:
          claimName: mongo-claim
      # You set volumes at the Pod level, then mount them into containers inside that Pod
      #- name: config
      #  configMap:
      #    # Provide the name of the ConfigMap you want to mount.
      #    name: mongo-conf
      #    # An array of keys from the ConfigMap to create as files
      #    items:
      #    - key: "db.sh"
      #      path: "db.sh"
        
---

apiVersion: v1
kind: Service
metadata:
  name: mongodb-service
  namespace: default
  labels:
    app: mongodb
spec:
  type: ClusterIP
  selector:
    app: mongodb
  ports:
   - port: 27017
     targetPort: 27017
     
# volumeclaimTemplates